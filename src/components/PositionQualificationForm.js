import React, { useState } from 'react';
import {
  Container,
  Paper,
  Typography,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Box,
  Grid,
  Divider,
  Alert,
  ListSubheader
} from '@mui/material';
import {
  Work as WorkIcon,
  Business as BusinessIcon,
  School as SchoolIcon,
  Save as SaveIcon,
  Clear as ClearIcon
} from '@mui/icons-material';
import AIAssessmentPanel from './AIAssessmentPanel';
import { assessPositionQualifications, getQualificationInsights } from '../services/geminiService';

const PositionQualificationForm = () => {
  const [formData, setFormData] = useState({
    positionName: '',
    positionLevel: '',
    industry: 'Mining' // Default to Mining since it's the only option
  });

  const [submitted, setSubmitted] = useState(false);
  const [assessmentData, setAssessmentData] = useState(null);
  const [insightsData, setInsightsData] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  // Predefined options - Mining Industry Focus
  const positionTitles = [
    { category: 'Entry Level', titles: ['Mining Helper', 'General Laborer', 'Mining Trainee', 'Surface Laborer', 'Underground Helper'] },
    { category: 'Equipment Operations', titles: ['Drill Operator', 'Excavator Operator', 'Loader Operator', 'Haul Truck Driver', 'Crusher Operator', 'Conveyor Operator'] },
    { category: 'Technical Support', titles: ['Mine Technician', 'Maintenance Technician', 'Electrical Technician', 'Mechanical Technician', 'Instrumentation Technician', 'Survey Technician'] },
    { category: 'Safety & Quality', titles: ['Safety Officer', 'Mine Safety Inspector', 'Quality Control Technician', 'Environmental Technician', 'Emergency Response Coordinator'] },
    { category: 'Supervision', titles: ['Shift Supervisor', 'Mine Supervisor', 'Production Supervisor', 'Maintenance Supervisor', 'Safety Supervisor', 'Team Leader'] },
    { category: 'Engineering', titles: ['Mining Engineer', 'Geological Engineer', 'Mechanical Engineer', 'Electrical Engineer', 'Environmental Engineer', 'Safety Engineer'] },
    { category: 'Geology & Exploration', titles: ['Geologist', 'Exploration Geologist', 'Mine Geologist', 'Resource Geologist', 'Senior Geologist', 'Chief Geologist'] },
    { category: 'Specialized Roles', titles: ['Blaster', 'Surveyor', 'Mine Planner', 'Metallurgist', 'Process Engineer', 'Ventilation Engineer'] },
    { category: 'Management', titles: ['Mine Manager', 'Operations Manager', 'Production Manager', 'Maintenance Manager', 'Safety Manager', 'General Foreman'] },
    { category: 'Senior Management', titles: ['General Manager', 'Site Manager', 'Regional Manager', 'Operations Director', 'Mining Director'] },
    { category: 'Executive', titles: ['Vice President Mining', 'Chief Operating Officer', 'Chief Executive Officer', 'Managing Director'] }
  ];

  const positionLevels = [
    { category: 'Entry Level', positions: ['Helper', 'Laborer', 'Trainee'] },
    { category: 'Operational', positions: ['Operator', 'Driver', 'Equipment Operator', 'Plant Operator'] },
    { category: 'Technical', positions: ['Technician', 'Maintenance Technician', 'Safety Officer', 'Quality Control'] },
    { category: 'Supervisory', positions: ['Supervisor', 'Team Leader', 'Shift Supervisor', 'Foreman'] },
    { category: 'Professional', positions: ['Engineer', 'Geologist', 'Environmental Specialist', 'Safety Engineer'] },
    { category: 'Senior Professional', positions: ['Senior Engineer', 'Chief Geologist', 'Principal Engineer', 'Senior Specialist'] },
    { category: 'Management', positions: ['Superintendent', 'Manager', 'Operations Manager', 'Department Manager'] },
    { category: 'Senior Management', positions: ['General Manager', 'Site Manager', 'Regional Manager'] },
    { category: 'Executive', positions: ['Director', 'Vice President', 'CEO'] }
  ];

  // Flatten titles for easier handling
  const allTitles = positionTitles.flatMap(category => 
    category.titles.map(title => ({
      value: title,
      label: title,
      category: category.category
    }))
  );

  // Flatten positions for easier handling
  const allPositions = positionLevels.flatMap(level => 
    level.positions.map(position => ({
      value: position,
      label: position,
      category: level.category
    }))
  );

  const industries = ['Mining']; // Simplified to just Mining

  // Removed qualificationCategories as qualifications will be generated by AI

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // Removed handleQualificationToggle as qualifications will be generated by AI

  const handleSubmit = (e) => {
    e.preventDefault();
    setSubmitted(true);
    console.log('Data Kualifikasi Posisi:', formData);
    // Here you would typically send the data to your backend
  };

  const handleClear = () => {
    setFormData({
      positionName: '',
      positionLevel: '',
      industry: 'Mining' // Keep Mining as default
    });
    setSubmitted(false);
    setAssessmentData(null);
    setInsightsData(null);
  };

  const handleGetAssessment = async () => {
    if (!formData.positionName || !formData.positionLevel || !formData.industry) {
      return;
    }

    setIsLoading(true);
    try {
      const assessment = await assessPositionQualifications(formData);
      setAssessmentData(assessment);
      
      // Show notification if using mock data
      if (assessment && assessment.isMockData) {
        console.log('Using mock assessment data due to API limitations');
        // You could add a toast notification here: "Using offline assessment data"
      }
    } catch (error) {
      console.error('Assessment error:', error);
      // You could add a toast notification here
    } finally {
      setIsLoading(false);
    }
  };

  const handleGetInsights = async () => {
    if (!formData.positionName) {
      return;
    }

    setIsLoading(true);
    try {
      const insights = await getQualificationInsights(formData);
      setInsightsData(insights);
      
      // Show notification if using mock data
      if (insights && insights.isMockData) {
        console.log('Using mock insights data due to API limitations');
        // You could add a toast notification here: "Using offline insights data"
      }
    } catch (error) {
      console.error('Insights error:', error);
      // You could add a toast notification here
    } finally {
      setIsLoading(false);
    }
  };

  const isFormValid = formData.positionName && formData.positionLevel; // Remove industry requirement since it's always "Mining"

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      <Paper elevation={3} sx={{ p: 4 }}>
        <Box sx={{ mb: 4, textAlign: 'center' }}>
          <Typography variant="h4" component="h1" gutterBottom color="primary">
            <WorkIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
            Penilaian Kualifikasi Posisi Pertambangan dengan AI
          </Typography>
          <Typography variant="subtitle1" color="text.secondary">
            Masukkan detail posisi pertambangan dan dapatkan rekomendasi kualifikasi berbasis AI
          </Typography>
        </Box>

        {submitted && (
          <Alert severity="success" sx={{ mb: 3 }}>
            Informasi posisi berhasil disimpan! Klik "Dapatkan Penilaian AI" untuk mendapatkan rekomendasi kualifikasi.
          </Alert>
        )}

        <form onSubmit={handleSubmit}>
          <Grid container spacing={3}>
            {/* Basic Information Section */}
            <Grid item xs={12}>
              <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>
                <BusinessIcon sx={{ mr: 1 }} />
                Mining Position Information
              </Typography>
              <Divider sx={{ mb: 2 }} />
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControl fullWidth required>
                <InputLabel>Position Title</InputLabel>
                <Select
                  value={formData.positionName}
                  label="Position Title"
                  onChange={(e) => handleInputChange('positionName', e.target.value)}
                >
                  {positionTitles.map((titleGroup) => [
                    <ListSubheader key={titleGroup.category} sx={{ fontWeight: 'bold', color: 'primary.main' }}>
                      {titleGroup.category}
                    </ListSubheader>,
                    ...titleGroup.titles.map((title) => (
                      <MenuItem key={title} value={title} sx={{ pl: 4 }}>
                        {title}
                      </MenuItem>
                    ))
                  ])}
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12} md={6}>
              <FormControl fullWidth required>
                <InputLabel>Position Level</InputLabel>
                <Select
                  value={formData.positionLevel}
                  label="Position Level"
                  onChange={(e) => handleInputChange('positionLevel', e.target.value)}
                >
                  {positionLevels.map((levelGroup) => [
                    <ListSubheader key={levelGroup.category} sx={{ fontWeight: 'bold', color: 'primary.main' }}>
                      {levelGroup.category}
                    </ListSubheader>,
                    ...levelGroup.positions.map((position) => (
                      <MenuItem key={position} value={position} sx={{ pl: 4 }}>
                        {position}
                      </MenuItem>
                    ))
                  ])}
                </Select>
              </FormControl>
            </Grid>

            {/* AI Assessment Section */}
            <Grid item xs={12}>
              <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center', mt: 2 }}>
                <SchoolIcon sx={{ mr: 1 }} />
                AI Assessment
              </Typography>
              <Divider sx={{ mb: 2 }} />
              <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                Click the button below to get qualification recommendations based on your selected mining position title and level.
              </Typography>
            </Grid>

            {/* Action Buttons */}
            <Grid item xs={12}>
              <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', mt: 3 }}>
                <Button
                  type="submit"
                  variant="contained"
                  size="large"
                  startIcon={<SaveIcon />}
                  disabled={!isFormValid}
                >
                  Save Position Information
                </Button>
                <Button
                  variant="outlined"
                  size="large"
                  startIcon={<ClearIcon />}
                  onClick={handleClear}
                >
                  Clear Form
                </Button>
              </Box>
            </Grid>
          </Grid>
        </form>
      </Paper>

      {/* AI Assessment Panel */}
      <AIAssessmentPanel
        positionData={formData}
        assessmentData={assessmentData}
        insightsData={insightsData}
        isLoading={isLoading}
        onGetAssessment={handleGetAssessment}
        onGetInsights={handleGetInsights}
      />
    </Container>
  );
};

export default PositionQualificationForm;
